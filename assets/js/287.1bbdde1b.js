(window.webpackJsonp=window.webpackJsonp||[]).push([[287],{685:function(t,s,a){"use strict";a.r(s);var r=a(56),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"spring-aop源码解析-解析切面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop源码解析-解析切面"}},[t._v("#")]),t._v(" Spring AOP源码解析：解析切面")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/4de79fa4a508414ea40428ad713dae92.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("h2",{attrs:{id:"实例化前阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例化前阶段"}},[t._v("#")]),t._v(" 实例化前阶段")]),t._v(" "),a("p",[t._v("之前的章节我们聊到了spring aop和ioc结合的阶段，本节我们来详细分析一下\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2bd4918b1f344be0b204d125e666c79a.png?",alt:"在这里插入图片描述"}}),t._v("\nAbstractAutoProxyCreator#postProcessBeforeInstantiation\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/09e3f190af754b3ca91dfb234b894624.png?",alt:"在这里插入图片描述"}}),t._v(" "),a("strong",[t._v("这个方法主要解析用户配置的切面类")]),t._v("，getCustomTargetSource用来处理用户自定义TargetSource的场景，一般没人自定义，所以这块内容就不分析了")]),t._v(" "),a("p",[t._v("targetSourcedBeans是用来保存用户自定义的bean，所以刚开始的if语句的第二个条件基本上都满足，第一个条件基本上不满足（我在本地debug的时候没发现有beanName为空的场景）")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringUtils")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("targetSourcedBeans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("而advisedBeans里面存的是和spring aop相关的基础类")]),t._v("，分别追一下2个方法。我先画个流程图，这样后面看源码的时候不会乱。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/3c6fd529b6fb4f3383606e4f6c8b9cdf.png?",alt:"在这里插入图片描述"}}),t._v("\nisInfrastructureClass主要判断类是否是aop相关的基础类，是的话就缓存下来，后续创建代理的时候会跳过。")]),t._v(" "),a("p",[t._v("shouldSkip接着判断非aop相关的基础类是否需要跳过代理，不太重要我就不分析了。"),a("strong",[t._v("这里方法有个很重要的功能，就是会把容器中配置的切面都解析出来，并缓存下来，因此解析的过程只会发生一次")])]),t._v(" "),a("h3",{attrs:{id:"isinfrastructureclass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isinfrastructureclass"}},[t._v("#")]),t._v(" isInfrastructureClass")]),t._v(" "),a("p",[t._v("开启aspect的时候，AbstractAutoProxyCreator的实现类为AnnotationAwareAspectJAutoProxyCreator，因此会先执行到如下方法\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/8202d95bd6c54240845e7ce23c361747.png?",alt:"请添加图片描述"}}),t._v("\nAnnotationAwareAspectJAutoProxyCreator#isInfrastructureClass\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/160a649dfaf64455afa167910b16a956.png?",alt:"在这里插入图片描述"}}),t._v("\n接着调用父类，主要用来判断是否是aop一代相关的基础类")]),t._v(" "),a("p",[t._v("AbstractAutoProxyCreator#isInfrastructureClass\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/40a16b7816574873aaa1ba45fb845894.png?",alt:"在这里插入图片描述"}}),t._v("\n判断完是否是aop一代相关的基础类，接着判断类上是否有Aspect注解，这是aop二代的定义方式哈")]),t._v(" "),a("p",[t._v("AbstractAspectJAdvisorFactory#isAspect\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/12a9866741de40e7a3e1f5df684b8b24.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("h3",{attrs:{id:"shouldskip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shouldskip"}},[t._v("#")]),t._v(" shouldSkip")]),t._v(" "),a("p",[t._v("shouldSkip我们只分析最重要的部分，即解析切面类")]),t._v(" "),a("p",[t._v("AspectJAwareAdvisorAutoProxyCreator#shouldSkip\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/c02cb2288a8e469f89c6f9ffce19e0cc.png?",alt:"在这里插入图片描述"}}),t._v("\nAnnotationAwareAspectJAutoProxyCreator#findCandidateAdvisors\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/bd24bdf64f764c298222ab2f67aa6700.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("super.findCandidateAdvisors()，这里再次调用父类的实现，用于支持在xml或者实现接口定义切面的形式")]),t._v(" "),a("p",[t._v("this.aspectJAdvisorsBuilder.buildAspectJAdvisors()，这个方法用于支持通过@Aspect定义切面的形式")]),t._v(" "),a("p",[t._v("AspectJAwareAdvisorAutoProxyCreator#shouldSkip\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/094d5fb21ce3475d8b85679116a1ee3d.png?",alt:"在这里插入图片描述"}}),t._v("\n跳过的逻辑我就不分析了哈，有兴趣的小伙伴可以看看")]),t._v(" "),a("h2",{attrs:{id:"初始化后阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化后阶段"}},[t._v("#")]),t._v(" 初始化后阶段")]),t._v(" "),a("p",[t._v("在文章最开始的图上，我已经标明了，"),a("strong",[t._v("在实例化后阶段，当发生循环依赖时，代理对象会提前生成，因此在初始化后阶段生成代理对象的时候需要先判断一下，如果代理对象已经生成了，就不用再代理了")])]),t._v(" "),a("p",[t._v("AbstractAutoProxyCreator#postProcessAfterInitialization\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/5117046da6984a628f270b33f08f3e91.png?",alt:"在这里插入图片描述"}}),t._v("\nAbstractAutoProxyCreator#wrapIfNecessary\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/a3d01787c2be445da4137fe33989b5ba.png?",alt:"在这里插入图片描述"}}),t._v(" "),a("strong",[t._v("跳过不需要代理的Bean，然后获取某个Bean对应的Advisor，接着根据Advisor生成代理对象")])]),t._v(" "),a("p",[t._v("AbstractAdvisorAutoProxyCreator#getAdvicesAndAdvisorsForBean\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/eb0326cd49c54802b964427d950f1426.png",alt:"在这里插入图片描述"}}),t._v("\nAbstractAdvisorAutoProxyCreator#findEligibleAdvisors")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/adb7ec95436c4516a067af6d5510f859.png",alt:"在这里插入图片描述"}}),t._v(" "),a("strong",[t._v("findEligibleAdvisors是一个很重要的方法，我们一行一行来分析")])]),t._v(" "),a("p",[t._v("findEligibleAdvisors，"),a("strong",[t._v("获取容器中配置的所有的Advisor，在实例化前阶段我们已经解析好了并缓存下来了哈")])]),t._v(" "),a("p",[t._v("findAdvisorsThatCanApply，获取适用于当前Bean的Advisor")]),t._v(" "),a("p",[t._v("extendAdvisors，是一个扩展方法，可以给Bean增加适用的Advisor，AbstractAdvisorAutoProxyCreator实现默认为空，而AspectJAwareAdvisorAutoProxyCreator给Bean增加ExposeInvocationInterceptor")]),t._v(" "),a("p",[t._v("sortAdvisors，对适用于当前Bean的Advisor进行排序")]),t._v(" "),a("h3",{attrs:{id:"sortadvisors-对适用于当前bean的advisor进行排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sortadvisors-对适用于当前bean的advisor进行排序"}},[t._v("#")]),t._v(" sortAdvisors（对适用于当前Bean的Advisor进行排序）")]),t._v(" "),a("p",[t._v("AspectJAwareAdvisorAutoProxyCreator#sortAdvisors\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2d495512a8fd4e9a8b7b2e0132b63e49.png?",alt:"在这里插入图片描述"}}),t._v("\n排序规则我们在后面执行切面的时候再分析哈")])])}),[],!1,null,null,null);s.default=n.exports}}]);