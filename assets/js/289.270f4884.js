(window.webpackJsonp=window.webpackJsonp||[]).push([[289],{695:function(t,n,a){"use strict";a.r(n);var s=a(56),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"详解spring-boot启动流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详解spring-boot启动流程"}},[t._v("#")]),t._v(" 详解Spring Boot启动流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210325182719144.jpg?",alt:"在这里插入图片描述"}})]),t._v(" "),a("h2",{attrs:{id:"新增扩展点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增扩展点"}},[t._v("#")]),t._v(" 新增扩展点")]),t._v(" "),a("p",[t._v("Spring Boot相对于Spring在启动流程上来说并没有太大的区别，只是借助于SpringApplication将启动过程模版化了，并在其中增加了批量注册，自动装配的功能，并开放了一系列的扩展点")]),t._v(" "),a("p",[t._v("对了还有一个重要的区别，原来基于servlet的web应用，是由servlet容器如tomcat来启动spring容器，现在是spring容器来启动servlet容器")]),t._v(" "),a("h3",{attrs:{id:"springapplicationrunlistener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springapplicationrunlistener"}},[t._v("#")]),t._v(" SpringApplicationRunListener")]),t._v(" "),a("p",[t._v("SpringApplicationRunListener它可以在Spring Boot main方法启动过程中接收不同时间点的事件。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplicationRunListener")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始启动")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("starting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// environment准备好了")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("environmentPrepared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableEnvironment")]),t._v(" environment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// context准备好了")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contextPrepared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contextLoaded")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("started")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("running")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("failed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Spring Boot中SpringApplicationRunListener的实现类就有一个EventPublishingRunListener，基本就是在各个时间点发布相应的事件，如ApplicationStartingEvent，ApplicationEnvironmentPreparedEvent等，有需要的化可以监听这些事件扩展启动的过程")]),t._v(" "),a("p",[t._v("当我们想用SpringApplicationRunListener进行扩展时，在当前应用的classpath下的META-INF/spring.factories中配置key为org.springframework.boot.SpringApplicationRunListener的实现类即可")]),t._v(" "),a("h3",{attrs:{id:"commandlinerunner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commandlinerunner"}},[t._v("#")]),t._v(" CommandLineRunner")]),t._v(" "),a("p",[a("strong",[t._v("CommandLineRunner是Spring Boot特有的扩展接口，和它类似的还有一个ApplicationRunner接口")])]),t._v(" "),a("p",[t._v("CommandLineRunner和ApplicationRunner会在ApplicationContext完全启动后开始执行\n可以利用这个接口做一些初始化工作，或者打印加载容器中的Bean，方便排查问题")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoApplication")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandLineRunner")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commandLineRunner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanDefinitionNames")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果你对Spring Boot启动过程中的扩展点的默认实现感兴趣的话，可以看一下spring.factories文件")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210328121251601.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("h2",{attrs:{id:"springapplication的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springapplication的创建"}},[t._v("#")]),t._v(" SpringApplication的创建")]),t._v(" "),a("p",[t._v("Spring Boot的启动过程大致可以分为如下4步（基于Servlet容器的we应用）")]),t._v(" "),a("ol",[a("li",[t._v("SpringApplication的创建")]),t._v(" "),a("li",[t._v("SpringApplication的启动")]),t._v(" "),a("li",[t._v("WebServer的创建与启动")]),t._v(" "),a("li",[t._v("DispatcherServlet的注册")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/df29c9287a7e4a0696c79c63df234922.png",alt:"在这里插入图片描述"}}),t._v("\nprimarySource是启动的配置类\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/118ef25c9cc24c2d8f3a6d0df03c03de.png",alt:"在这里插入图片描述"}}),t._v("\n推断web容器的方式比较简单，看classpath中是否有相应的类\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/9bc76eb49ee54f29b1d4dc34a20000e1.png?",alt:"在这里插入图片描述"}}),t._v("\nSpringApplication的创建比较简单，画图总结一下\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210328162220893.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("h2",{attrs:{id:"springapplication的启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springapplication的启动"}},[t._v("#")]),t._v(" SpringApplication的启动")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/a94deccb22bf4c7699dcb526253aa5d6.png?",alt:"在这里插入图片描述"}}),t._v("\nSpringApplication的源码就不追了，大概就是这样一个启动流程\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2fcaaf88d24f4c7aa4f079497489bb49.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("其中通告starting，就是执行SpringApplicationRunListener#starting方法。以此类推")]),t._v(" "),a("h2",{attrs:{id:"webserver的创建与启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webserver的创建与启动"}},[t._v("#")]),t._v(" WebServer的创建与启动")]),t._v(" "),a("p",[t._v("启动Application的过程其实就是执行AbstractApplicationContext#refresh方法，这个方法我们之前仔细分析过了哈，就是一个启动的模版方法，子类可以基于这个方法进行扩展。本节我们就简单看一下针对servlet这种容器，在启动的过程中做了哪些扩展！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/88f3b120a9454e3389bdec68c46a1e85.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/0365085df22c475ab667fab754b64979.png",alt:"在这里插入图片描述"}}),t._v("\nServletWebServerApplicationContext#createWebServer\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/cd486db552c74b84befa0d6ca55c0858.png?",alt:"在这里插入图片描述"}}),t._v("\n创建的时候传入了一个ServletContextInitializer接口的实现类，这个类后面会用到哈，先在这里提一下")]),t._v(" "),a("p",[t._v("ServletWebServerApplicationContext#getSelfInitializer\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/c1917f168f3a48578284e6df08bdfd04.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("画图总结一下WebServer的创建与启动过程\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/9891aea3f2f447ea913318b3b9f2a560.png?",alt:"在这里插入图片描述"}})]),t._v(" "),a("h2",{attrs:{id:"dispatcherservlet的注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatcherservlet的注册"}},[t._v("#")]),t._v(" DispatcherServlet的注册")]),t._v(" "),a("p",[t._v("将DispatcherServlet注册到WebServer的过程主要分为如下2个部分")]),t._v(" "),a("ol",[a("li",[t._v("DispatcherServlet被注册到Spring容器中")]),t._v(" "),a("li",[t._v("ServletRegistrationBean包装了DispatcherServlet，并将DispatcherServlet注册到WebServer中")])]),t._v(" "),a("h4",{attrs:{id:"dispatcherservlet怎么被注册到spring容器中的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatcherservlet怎么被注册到spring容器中的"}},[t._v("#")]),t._v(" DispatcherServlet怎么被注册到Spring容器中的")]),t._v(" "),a("p",[t._v("很简单，在DispatcherServlet的无参构造方法上加一个断点")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210328153553722.png?",alt:"在这里插入图片描述"}}),t._v("\n看下一个调用栈，实在DispatcherServletAutoConfiguration中被注入进来的\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210328153835156.png?",alt:"在这里插入图片描述"}}),t._v("\n这个配置类在spring.factories文件中，所以Spring Boot启动就会加载这个类，但这只是将DispatcherServlet注入到spring容器，所以一定是有其他的Bean把DispatcherServlet注入到Servlet容器中的，查找到用了DispatcherServlet类的Bean就只有DispatcherServletRegistrationBean\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/97a7098af3c948ceb6242b0f40027075.png?",alt:"在这里插入图片描述"}}),t._v("\n那估计就是DispatcherServletRegistrationBean将DispatcherServlet注入到Servlet容器了")]),t._v(" "),a("h3",{attrs:{id:"为什么dispatcherservletregistrationbean能把dispatcherservlet注入到servelt容器中呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么dispatcherservletregistrationbean能把dispatcherservlet注入到servelt容器中呢"}},[t._v("#")]),t._v(" 为什么DispatcherServletRegistrationBean能把DispatcherServlet注入到Servelt容器中呢？")]),t._v(" "),a("p",[a("strong",[t._v("这时候就不得不提我们在Spring MVC的启动流程中提到的ServletContainerInitializer接口了，Servlet3.0之后Servlet容器启动后得回调ServletContainerInitializer#onStartup方法，这是规范得遵守。")])]),t._v(" "),a("p",[t._v("在tomcat启动后会调用TomcatStarter#onStartup方法，接着调用ServletContextInitializer#onStartup方法\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/665df21476ad46ac8595adb5b4be0f04.png?",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/7bbe39cc8d814738bf792cfe3905df35.png?",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2225b825087e452289280e94e741020c.png",alt:"请添加图片描述"}})]),t._v(" "),a("p",[t._v("DispatcherServletRegistrationBean实现了ServletContextInitializer接口，在onStartup方法中将servlet注入到servlet容器")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210328172814634.png?",alt:"在这里插入图片描述"}}),t._v("\n我直接总结一下把，你对着我的流程图debug就懂了")]),t._v(" "),a("ol",[a("li",[t._v("通过DispatcherServletAutoConfiguration往spring容器中注入DispatcherServlet")]),t._v(" "),a("li",[t._v("DispatcherServlet被包装为DispatcherServletRegistrationBean，用于向Servlet容器中注册")]),t._v(" "),a("li",[t._v("在Tomcat创建阶段，将ServletContainerInitializer接口的实现类（即selfInitialize方法）设置到TomcatStarter中")]),t._v(" "),a("li",[t._v("把TomcatStarter注册到Tomcat中")]),t._v(" "),a("li",[t._v("Tomcat启动后，会调用ServletContainerInitializer#onStartup，即调用TomcatStarter#onStartup，接着调用ServletWebServerApplicationContext#selfInitialize")]),t._v(" "),a("li",[t._v("selfInitialize方法回调ServletContextInitializer#onStartup方法")]),t._v(" "),a("li",[t._v("DispatcherServletRegistrationBean实现类ServletContextInitializer接口，所以会调用父类的\nRegistrationBean#onStartup方法")]),t._v(" "),a("li",[t._v("在RegistrationBean#onStartup方法中会把内部维护的Servlet，Listener，Filter注册到ServletContext中")])])])}),[],!1,null,null,null);n.default=e.exports}}]);