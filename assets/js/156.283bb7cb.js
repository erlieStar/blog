(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{554:function(t,a,s){"use strict";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"面试官-说一下spring-bean的生命周期呗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试官-说一下spring-bean的生命周期呗"}},[t._v("#")]),t._v(" 面试官：说一下Spring Bean的生命周期呗")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210227090002118.jpg?",alt:"在这里插入图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("可能本文对没有阅读过Spring源码的同学有些难理解，因为Spring Bean生命周期还是比较复杂的，如果我花过多的时间来解释基本的概念，会使本文过于冗余，因此建议收藏，有疑惑的地方欢迎留言和我交流")]),t._v(" "),s("p",[s("strong",[t._v("如果我们要对Spring进行扩展，一般有如下方法")])]),t._v(" "),s("ol",[s("li",[t._v("实现BeanFactoryPostProcessor接口")]),t._v(" "),s("li",[t._v("实现BeanPostProcessor接口")])]),t._v(" "),s("p",[t._v("BeanPostProcessor接口的使用我会在文章最后写一个Demo，先演示一下BeanFactoryPostProcessor接口的作用，对BeanFactory进行扩展")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyBeanFactoryPostProcessor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanFactoryPostProcessor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanDefinitionName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanDefinitionNames")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinition")]),t._v(" beanDefinition "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanDefinition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanDefinitionName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            beanDefinition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setScope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prototype"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("我们都知道Spring容器中的Bean的作用域默认是singleton，我们扩展容器让所有Bean的作用域变为prototype，此时每次从容器中获取的对象都是新对象")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" animal1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" applicationContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"animal"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" animal2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" applicationContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"animal"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animal1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" animal2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("BeanPostProcessor接口可以对Bean生命周期中的很多部分进行扩展，并且Spring容器中有很多内建的BeanPostProcessor对Spring Bean的功能进行支持。搞懂了Spring内置的BeanPostProcessor的功能，基本上就把Spring Bean的生命周期搞懂了")]),t._v("。其余的如事件，国际化，资源管理在此基础上就很容易理解了")]),t._v(" "),s("p",[s("strong",[t._v("Spring Bean的生命周期可以主要分为如下4个部分")])]),t._v(" "),s("ol",[s("li",[t._v("处理BeanDefinition：BeanDefinition的解析，注册，合并")]),t._v(" "),s("li",[t._v("Bean实例化（Instantiation）：还没有生成bean，即没有调用构造函数，生成对象")]),t._v(" "),s("li",[t._v("Bean初始化（Initialization）：已经生成bean，进行属性赋值")]),t._v(" "),s("li",[t._v("Bean销毁：并没有gc")])]),t._v(" "),s("h2",{attrs:{id:"spring-bean生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean生命周期"}},[t._v("#")]),t._v(" Spring Bean生命周期")]),t._v(" "),s("h3",{attrs:{id:"beandefinition解析阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition解析阶段"}},[t._v("#")]),t._v(" BeanDefinition解析阶段")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("配置方式")]),t._v(" "),s("th",[t._v("实现类")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("XML资源")]),t._v(" "),s("td",[t._v("XmlBeanDefinitionReader")])]),t._v(" "),s("tr",[s("td",[t._v("Properties资源")]),t._v(" "),s("td",[t._v("PropertiesBeanDefinitionReader")])]),t._v(" "),s("tr",[s("td",[t._v("Java注解")]),t._v(" "),s("td",[t._v("AnnotatedBeanDefinitionReader")])])])]),t._v(" "),s("p",[t._v("在开发过程中，我们会用Java文件来描述一个对象。在Spring中我们则用BeanDefinition来描述一个Bean，因为Bean在对象的基础上增加了很多属性，例如Bean是单例的还是原型的？Bean是否延迟加载，此时Java文件就不能描述一个Bean了，我们就用BeanDefinition来描述BeanDefinition")]),t._v(" "),s("p",[t._v("BeanDefinition的一些元信息如下")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("beanClass")]),t._v(" "),s("td",[t._v("bean对应的Class类")])]),t._v(" "),s("tr",[s("td",[t._v("lazyInit")]),t._v(" "),s("td",[t._v("是否延迟初始化")])]),t._v(" "),s("tr",[s("td",[t._v("autowireMode")]),t._v(" "),s("td",[t._v("自动绑定模式，无，byName，byType等")])]),t._v(" "),s("tr",[s("td",[t._v("initMethodName")]),t._v(" "),s("td",[t._v("初始化回调方法")])]),t._v(" "),s("tr",[s("td",[t._v("destroyMethodName")]),t._v(" "),s("td",[t._v("销毁回调方法")])])])]),t._v(" "),s("h3",{attrs:{id:"beandefinition注册阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition注册阶段"}},[t._v("#")]),t._v(" BeanDefinition注册阶段")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021031215280990.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("配置被解析成BeanDefinition后，会被注册到BeanDefinitionRegistry")]),t._v(" "),s("p",[s("strong",[t._v("BeanDefinitionRegistry基本实现就是DefaultListableBeanFactory")])]),t._v(" "),s("p",[t._v("DefaultListableBeanFactory中和BeanDefinition相关的属性如下")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Map of bean definition objects, keyed by bean name. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" beanDefinitionMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** List of bean definition names, in registration order. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" beanDefinitionNames "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("beanDefinitionMap用来保存beanName和BeanDefinition的映射关系\n因为map不能保存bean放进来的顺序，所以增加了一个beanDefinitionNames来保存bean的顺序")]),t._v(" "),s("h3",{attrs:{id:"beandefinition合并阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition合并阶段"}},[t._v("#")]),t._v(" BeanDefinition合并阶段")]),t._v(" "),s("p",[t._v("假设有2个对象User和Student，Student继承自User")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.javashitang.domain.User"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("zhang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.javashitang.domain.Student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("parent")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("description"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xml"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("从容器中获取这2个对象时，属性如下，可以看到Student把User对象的属性继承过来了，这种情况就涉及到BeanDefinition的合并。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("zhang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("zhang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" description"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xml"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("在最开始的时候User和Student都是GenericBeanDefinition，当进行完合并的时候会变成RootBeanDefinition")])]),t._v(" "),s("p",[s("strong",[t._v("Bean的实例化和初始化这部分只要追着AbstractBeanFactory#doGetBean这个方法看就行了，我会在每个阶段标注代码执行的位置，方便大家Debug调试，及查看调用链路")])]),t._v(" "),s("p",[t._v("源码位置：org.springframework.beans.factory.support.AbstractBeanFactory#getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)")]),t._v(" "),s("p",[t._v("我启动的容器是ApplicationContext，因为BeanPostProcessor在Bean的生命周期中起了重要的作用，我们就直接来看一下容器启动后，注册了多少BeanPostProcessor")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210314195526777.png?",alt:"在这里插入图片描述"}}),t._v(" "),s("strong",[t._v("可以看到注册了6个BeanPostProcessor，后面分析Bean的生命周期的时候，我会把每个BeanPostProcessor所起的作用标记出来")])]),t._v(" "),s("h3",{attrs:{id:"bean-实例化前阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-实例化前阶段"}},[t._v("#")]),t._v(" Bean 实例化前阶段")]),t._v(" "),s("p",[s("strong",[t._v("InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation")]),t._v("\n返回不为空，说明bean已经在这个方法中创建好了，不需要再进行后续的处理了")]),t._v(" "),s("p",[s("strong",[t._v("生效类")]),t._v("\nCommonAnnotationBeanPostProcessor#postProcessBeforeInstantiation：return null，所以正常情况下都会进行后续的流程")]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInstantiation")]),t._v(" "),s("h3",{attrs:{id:"bean-实例化阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-实例化阶段"}},[t._v("#")]),t._v(" Bean 实例化阶段")]),t._v(" "),s("p",[s("strong",[t._v("SmartInstantiationAwareBeanPostProcessor#determineCandidateConstructors")]),t._v("\n选择合适的构造器，如果返回的不为空，则用返回的构造函数实例化Bean，如果返回为null，则用无参数构造函数实例化Bean")]),t._v(" "),s("p",[s("strong",[t._v("生效类")]),t._v("\nAutowiredAnnotationBeanPostProcessor#determineCandidateConstructors：用来支持@Lookup注解，并且推断出要创建这个Bean需要的构造函数")]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#determineConstructorsFromBeanPostProcessors")]),t._v(" "),s("h3",{attrs:{id:"bean-实例化后阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-实例化后阶段"}},[t._v("#")]),t._v(" Bean 实例化后阶段")]),t._v(" "),s("p",[s("strong",[t._v("MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition")])]),t._v(" "),s("p",[s("strong",[t._v("生效类")]),t._v("\nAutowiredAnnotationBeanPostProcessor#postProcessMergedBeanDefinition：\n解析@Autowired，@Value，@Inject，并将相关的信息保存下来，后续对Bean属性进行赋值的时候要用")]),t._v(" "),s("p",[t._v("CommonAnnotationBeanPostProcessor#postProcessMergedBeanDefinition：\n解析@WebServiceRef，@EJB，@Resource，@PostConstruct，@PreDestroy，并将相关信息保存下来，后续对Bean属性赋值（@WebServiceRef，@EJB，@Resource），生命周期（@PostConstruct，@PreDestroy）支持要用")]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyMergedBeanDefinitionPostProcessors")]),t._v(" "),s("p",[s("strong",[t._v("SmartInstantiationAwareBeanPostProcessor#getEarlyBeanReference")]),t._v("\n发生循环依赖的对象会从ObjectFactory获取提前曝光的对象，而这个提前曝光的对象，会经过\nSmartInstantiationAwareBeanPostProcessor#getEarlyBeanReference增强，然后返回。\n如果你对循环依赖的三级缓存不清楚的话，建议看《面试官：Spring如何解决循环依赖？》")]),t._v(" "),s("p",[s("strong",[t._v("生效类")]),t._v("\nInstantiationAwareBeanPostProcessorAdapter#getEarlyBeanReference（ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor父类）：直接return bean\nInstantiationAwareBeanPostProcessorAdapter#getEarlyBeanReference")]),t._v(" "),s("p",[t._v("（AutowiredAnnotationBeanPostProcessor父类）：直接return bean")]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#getEarlyBeanReference")]),t._v(" "),s("h3",{attrs:{id:"bean-属性赋值前阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-属性赋值前阶段"}},[t._v("#")]),t._v(" Bean 属性赋值前阶段")]),t._v(" "),s("p",[s("strong",[t._v("InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation")]),t._v("\n对象已经被实例化，该实例的属性还未被设置，都是null。该方法返回false，会忽略属性值的设置。返回true，会按正常流程设置属性值")]),t._v(" "),s("p",[s("strong",[t._v("生效类")]),t._v("\nCommonAnnotationBeanPostProcessor#postProcessAfterInstantiation：return true")]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean")]),t._v(" "),s("h3",{attrs:{id:"bean-属性赋值阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-属性赋值阶段"}},[t._v("#")]),t._v(" Bean 属性赋值阶段")]),t._v(" "),s("p",[s("strong",[t._v("InstantiationAwareBeanPostProcessor#postProcessProperties")]),t._v(" "),s("strong",[t._v("InstantiationAwareBeanPostProcessor#postProcessPropertyValues")])]),t._v(" "),s("p",[t._v("对属性值进行修改，postProcessProperties用来替代postProcessPropertyValues")]),t._v(" "),s("p",[t._v("AutowiredAnnotationBeanPostProcessor#postProcessProperties：查找被@Autowired和@Value标注的方法或属性，并且注入需要的值\nCommonAnnotationBeanPostProcessor#postProcessProperties：查找被@WebServiceRef，@EJB，@Resource标注的属性，并且注入需要的值")]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean")]),t._v(" "),s("h3",{attrs:{id:"bean-aware接口回调阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-aware接口回调阶段"}},[t._v("#")]),t._v(" Bean Aware接口回调阶段")]),t._v(" "),s("p",[t._v("依次回掉如下接口，注入相应的对象")]),t._v(" "),s("p",[t._v("BeanNameAware\nBeanClassLoaderAware\nBeanFactoryAware\nEnvironmentAware\nEmbeddedValueResolverAware\nResourceLoaderAware\nApplicationEventPublisherAware\nMessageSourceAware\nApplicationContextAware")]),t._v(" "),s("p",[s("strong",[t._v("源码位置1")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#invokeAwareMethods")]),t._v(" "),s("p",[s("strong",[t._v("只会回掉BeanNameAware，BeanClassLoaderAware，BeanFactoryAware这3个接口的实现类")])]),t._v(" "),s("p",[s("strong",[t._v("源码位置2")]),t._v("\norg.springframework.context.support.ApplicationContextAwareProcessor#invokeAwareInterfaces")]),t._v(" "),s("p",[s("strong",[t._v("只会回掉EnvironmentAware接口及其后面的接口")])]),t._v(" "),s("p",[t._v("为啥Aware接口的回调要放在2个不同的地方？")]),t._v(" "),s("p",[t._v("在回答这个问题之前我抛出一个高频面试题")]),t._v(" "),s("p",[s("strong",[t._v("ApplicationContext和BeanFactory有哪些区别？")])]),t._v(" "),s("ol",[s("li",[t._v("BeanFactory是一个最基础的IOC容器，提供了依赖查找，依赖注入等基础的功能")]),t._v(" "),s("li",[t._v("ApplicationContext继承了BeanFactory，在BeanFactory的基础上增加了企业级的功能，如AOP，资源管理（Resources）事件（Event），国际化（i18n），Environment抽象等")])]),t._v(" "),s("p",[t._v("因此当我们启动的容器是BeanFactory时，只能注入BeanNameAware，BeanClassLoaderAware，BeanFactoryAware接口的实现，其他接口的实现它并没有，怎么给你？")]),t._v(" "),s("p",[t._v("当我们启动的容器是ApplicationContext时，对这些接口进行了实现，此时才能注入进来")]),t._v(" "),s("p",[s("strong",[t._v("根据启动容器类型的不同，回调不同的Aware接口是如何实现的？")])]),t._v(" "),s("p",[t._v("当进行依赖查找的时候（调用getBean方法），会回掉BeanNameAware，BeanClassLoaderAware，BeanFactoryAware接口")]),t._v(" "),s("p",[t._v("当容器是ApplicationContext时，会在启动的时候增加一个BeanPostProcessor，即ApplicationContextAwareProcessor，当调用ApplicationContextAwareProcessor#postProcessBeforeInitialization方法的时候，会回掉其余Aware接口的实现")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210313193619600.jpeg?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210313193631403.jpeg?",alt:"在这里插入图片描述"}})]),t._v(" "),s("h3",{attrs:{id:"bean-初始化前阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-初始化前阶段"}},[t._v("#")]),t._v(" Bean 初始化前阶段")]),t._v(" "),s("p",[s("strong",[t._v("BeanPostProcessor#postProcessBeforeInitialization")]),t._v("\n在Bean初始化之前需要调用的方法")]),t._v(" "),s("p",[s("strong",[t._v("生效类")])]),t._v(" "),s("p",[t._v("ApplicationContextAwareProcessor#postProcessBeforeInitialization：用来回调ApplicationContext相关的一些接口")]),t._v(" "),s("p",[t._v("ConfigurationClassPostProcessor.ImportAwareBeanPostProcessor#postProcessBeforeInitialization：用来支持ImportAware接口")]),t._v(" "),s("p",[t._v("CommonAnnotationBeanPostProcessor#postProcessBeforeInstantiation：执行@PostConstruct标注的方法")]),t._v(" "),s("p",[t._v("AutowiredAnnotationBeanPostProcessor#postProcessBeforeInstantiation：\nreturn null")]),t._v(" "),s("p",[t._v("ApplicationListenerDetector#postProcessBeforeInitialization：直接return bean，没有做任何操作")]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization")]),t._v(" "),s("h3",{attrs:{id:"bean-初始化阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-初始化阶段"}},[t._v("#")]),t._v(" Bean 初始化阶段")]),t._v(" "),s("p",[t._v("依次调用如下方法：")]),t._v(" "),s("ol",[s("li",[t._v("@PostConstruct标注方法")]),t._v(" "),s("li",[t._v("实现InitializingBean接口的afterPropertiesSet()方法")]),t._v(" "),s("li",[t._v("自定义初始方法")])]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#invokeInitMethods")]),t._v(" "),s("h3",{attrs:{id:"bean-初始化后阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-初始化后阶段"}},[t._v("#")]),t._v(" Bean 初始化后阶段")]),t._v(" "),s("p",[s("strong",[t._v("BeanPostProcessor#postProcessAfterInitialization")])]),t._v(" "),s("p",[s("strong",[t._v("生效类")]),t._v("\nAutowiredAnnotationBeanPostProcessor#postProcessBeforeInstantiation：return null\nCommonAnnotationBeanPostProcessor#postProcessBeforeInstantiation：在父类InitDestroyAnnotationBeanPostProcessor中有实现，return bean\n在Bean初始化之后需要调用的对象")]),t._v(" "),s("p",[s("strong",[t._v("源码位置")]),t._v("\norg.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization")]),t._v(" "),s("h3",{attrs:{id:"bean-初始化完成阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-初始化完成阶段"}},[t._v("#")]),t._v(" Bean 初始化完成阶段")]),t._v(" "),s("h3",{attrs:{id:"bean-销毁前阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-销毁前阶段"}},[t._v("#")]),t._v(" Bean 销毁前阶段")]),t._v(" "),s("p",[s("strong",[t._v("DestructionAwareBeanPostProcessor#postProcessBeforeDestruction")])]),t._v(" "),s("p",[t._v("实现DestructionAwareBeanPostProcessor接口的postProcessBeforeDestruction方法，添加自定义的逻辑，例如修改对象属性等")]),t._v(" "),s("p",[s("strong",[t._v("生效类")]),t._v("\nInitDestroyAnnotationBeanPostProcessor#postProcessBeforeDestruction（CommonAnnotationBeanPostProcessor的父类）：被@PreDestory标注方法标注的方法")]),t._v(" "),s("p",[t._v("源码位置：")]),t._v(" "),s("h3",{attrs:{id:"bean-销毁阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-销毁阶段"}},[t._v("#")]),t._v(" Bean 销毁阶段")]),t._v(" "),s("p",[t._v("依次调用如下方法：")]),t._v(" "),s("ol",[s("li",[t._v("@PreDestory标注方法")]),t._v(" "),s("li",[t._v("实现DisposableBean接口的destory()方法")]),t._v(" "),s("li",[t._v("自定义销毁方法")])]),t._v(" "),s("p",[t._v("源码位置：")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("可以看到在整个Bean的生命周期中，各种BeanPostProcessor起了非常重要的作用，搞懂了这些BeanPostProcessor的实现，基本上就搞懂了Spring Bean的生命周期")]),t._v(" "),s("p",[t._v("不仅如此，BeanPostProcessor不仅在IOC上发挥了重要作用，在AOP上也发挥了重要的作用")]),t._v(" "),s("p",[t._v("最后总结一波流程图\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210527165808994.png?",alt:"在这里插入图片描述"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);