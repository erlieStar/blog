(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{574:function(v,t,_){"use strict";_.r(t);var a=_(56),r=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"jvm实战-垃圾收集器及其适用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm实战-垃圾收集器及其适用场景"}},[v._v("#")]),v._v(" JVM实战：垃圾收集器及其适用场景")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200301000856579.jpg?",alt:"在这里插入图片描述"}})]),v._v(" "),_("h2",{attrs:{id:"垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[v._v("#")]),v._v(" 垃圾收集器")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/5f86772e3316455f8c92cf4f2922fa38.png",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[v._v("图中展示了七种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。在JDK8时将Serial+CMS，ParNew+Serial Old这两个组合声明为废弃，并在JDK9中完全取消了这些组合的支持")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/5e8c04dba5944495adea650e21cff073.png#pic_center",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[v._v("并行和并发都是并发编程中的专业名词，在谈论垃圾收集器的上下文语境中， 它们可以理解为")]),v._v(" "),_("p",[_("strong",[v._v("并行（Parallel）")]),v._v("：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态")]),v._v(" "),_("p",[_("strong",[v._v("并发（Concurrent")]),v._v("）：指用户线程与垃圾收集线程同时执行")]),v._v(" "),_("h2",{attrs:{id:"串行收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#串行收集器"}},[v._v("#")]),v._v(" 串行收集器")]),v._v(" "),_("h3",{attrs:{id:"serial收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#serial收集器"}},[v._v("#")]),v._v(" Serial收集器")]),v._v(" "),_("p",[_("strong",[v._v("新生代，标记-复制算法，单线程。进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200301121754389.PNG?",alt:"在这里插入图片描述"}})]),v._v(" "),_("h3",{attrs:{id:"serial-old收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#serial-old收集器"}},[v._v("#")]),v._v(" Serial Old收集器")]),v._v(" "),_("p",[_("strong",[v._v("老年代，标记-整理算法，单线程，是Serial收集器的老年代版本")])]),v._v(" "),_("p",[v._v("用处有如下2个")]),v._v(" "),_("ol",[_("li",[v._v("在JDK5以及之前的版本中与Parallel Scavenge收集器搭配使用")]),v._v(" "),_("li",[v._v("作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用")])]),v._v(" "),_("h2",{attrs:{id:"并行收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并行收集器"}},[v._v("#")]),v._v(" 并行收集器")]),v._v(" "),_("h3",{attrs:{id:"parallel-scavenge收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge收集器"}},[v._v("#")]),v._v(" Parallel Scavenge收集器")]),v._v(" "),_("p",[_("strong",[v._v("新生代，标记复制算法，多线程，主要关注吞吐量")])]),v._v(" "),_("p",[v._v("吞吐量=运行用户代码时间/(运行用户代码时间+运行垃圾收集时间)")]),v._v(" "),_("h3",{attrs:{id:"parallel-old收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old收集器"}},[v._v("#")]),v._v(" Parallel Old收集器")]),v._v(" "),_("p",[_("strong",[v._v("老年代，标记-整理算法，多线程，是Parallel Scavenge收集器的老年代版本")])]),v._v(" "),_("p",[v._v("在注重吞吐量或者处理器资源较为稀缺的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200301121828206.PNG?",alt:"在这里插入图片描述"}})]),v._v(" "),_("h3",{attrs:{id:"parnew收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#parnew收集器"}},[v._v("#")]),v._v(" ParNew收集器")]),v._v(" "),_("p",[_("strong",[v._v("ParNew本质上是Serial收集器的多线程并行版本")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200301121804102.PNG?",alt:"在这里插入图片描述"}})]),v._v(" "),_("h3",{attrs:{id:"cms收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms收集器"}},[v._v("#")]),v._v(" CMS收集器")]),v._v(" "),_("p",[_("strong",[v._v("老年代，标记-清除算法，多线程，主要关注延迟")])]),v._v(" "),_("p",[v._v("运作过程分为4个步骤")]),v._v(" "),_("ol",[_("li",[v._v("初始标记（CMS initial mark）")]),v._v(" "),_("li",[v._v("并发标记（CMS concurrent mark）")]),v._v(" "),_("li",[v._v("重新标记（CMS remark）")]),v._v(" "),_("li",[v._v("并发清除（CMS concurrent sweep）")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200301123808139.PNG?",alt:"在这里插入图片描述"}}),v._v("\n5. 初始标记：标记一下GC Roots能直接关联到的对象，速度很快（这一步会发生STW）\n6. 并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集一起并发运行\n7. 重新标记：为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录（"),_("strong",[v._v("就是三色标记法中的增量更新")]),v._v("，这一步也会发生STW）\n8. 并发清除：清理删除掉标记阶段判断的已经死亡的对象，由于不需要移动存活对象，所以看这个阶段也是可以与用户线程同时并发的")]),v._v(" "),_("p",[_("strong",[v._v("因为目前ParNew+CMS的组合最常用，因此我们就接着来看看CMS有哪些问题？")])]),v._v(" "),_("p",[_("strong",[v._v("1.并发回收垃圾导致CPU资源紧张")])]),v._v(" "),_("p",[v._v("并发标记和并发清理阶段，垃圾回收线程和系统工作线程同时工作，会导致有限的CPU资源被垃圾回收线程占用了一部分")]),v._v(" "),_("p",[_("strong",[v._v("2.无法处理浮动垃圾")])]),v._v(" "),_("p",[v._v("在并发清理阶段，CMS回收的是之前标记好的对象，但是这个阶段系统一直在运行，有可能会产生新的垃圾对象，这种垃圾对象就是“浮动垃圾”，浮动垃圾只能等到下一次GC才会被回收")]),v._v(" "),_("p",[_("strong",[v._v("3.Concurrent Mode Failure导致垃圾收集器切换到SerialOld")])]),v._v(" "),_("p",[v._v("如果在CMS垃圾回收期间，程序要放入老年代的对象大于了可用内存空间，会发生Concurrent Mode Failure，就是说并发垃圾回收失败，我一边回收，你一边把对象放入老年代，内存都不够用了。此时就会用SerialOld替换CMS，直接 Stop the World 进行垃圾回收，一次性把垃圾对象都回收掉")]),v._v(" "),_("p",[_("strong",[v._v("4.CMS用的是标记清除算法，会导致大量的内存碎片")])]),v._v(" "),_("h3",{attrs:{id:"g1收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器"}},[v._v("#")]),v._v(" G1收集器")]),v._v(" "),_("p",[_("strong",[v._v("G1收集器最大的特点就是把堆划分成多个大小相等的Region")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/3433c995b1fc473ba14b60c0a8d350cd.png",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[v._v("G1也会有新生代和老年代的概念，但是是逻辑上的概念，并不是物理上的概念。"),_("strong",[v._v("一个Region有可能属于新生代有可能属于老年代，新生代和老年代的内存区域是不停变动的，由G1自动控制")])]),v._v(" "),_("p",[v._v("在G1之前的垃圾收集器，当发生GC的时候，要么回收整个新生代，要么回收整个老年代。而G1可以面向堆内存的任何部分进行回收，"),_("strong",[v._v("Region是单次回收的基本单元")])]),v._v(" "),_("p",[v._v("有了Region作为单次回收的基本单元，就能建立"),_("strong",[v._v("可预测停顿时间模型")]),v._v("，即我们可以通过设置 -XX:MaxGCPauseMillis 参数来控制STW的时间，G1尽可能的在这个时间内完成垃圾收集，并且"),_("strong",[v._v("G1会优先回收价值收益大的Region（即花的时间少并且回收的垃圾还多）")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/0030e6c7b189470ca01ec380e40799b4.png",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[v._v("G1收集器的运行过程如下")]),v._v(" "),_("ol",[_("li",[v._v("初始标记：标记一下GC Roots能直接关联到的对象，速度很快（这一步会发生STW）")]),v._v(" "),_("li",[v._v("并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集一起并发运行")]),v._v(" "),_("li",[v._v("最终标记：为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录（"),_("strong",[v._v("就是三色标记法中的原始快照")]),v._v("，这一步也会发生STW）")]),v._v(" "),_("li",[v._v("筛选回收：根据用户期望的停顿时间，回收部分Region。首先把要回收的Region中的存活对象复制到空的Region，在清理掉旧Region的空间")])]),v._v(" "),_("p",[_("strong",[v._v("与CMS的“标记-清除”算法不同， G1从整体来看是基于“标记-整理”算法实现的收集器")]),v._v("， 但从局部（两个Region之间） 上看又是基于“标记-复制”算法实现， 无论如何， 这两种算法都意味着G1运作期间不会产生内存空间碎片， 垃圾收集完成之后能提供规整的可用内存。 这种特性有利于程序长时间运行， 在程序为大对象分配内存时不容易因无法找到连续内存空间而提前触发下一次收集")]),v._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("收集器")]),v._v(" "),_("th",[v._v("收集对象和算法")]),v._v(" "),_("th",[v._v("收集器类型")]),v._v(" "),_("th",[v._v("说明")]),v._v(" "),_("th",[v._v("适用场景")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Serial")]),v._v(" "),_("td",[v._v("新生代，复制算法")]),v._v(" "),_("td",[v._v("单线程")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("简单高效；适合内存不大的情况")])]),v._v(" "),_("tr",[_("td",[v._v("ParNew")]),v._v(" "),_("td",[v._v("新生代，复制算法")]),v._v(" "),_("td",[v._v("并行的多线程收集器")]),v._v(" "),_("td",[v._v("ParNew垃圾收集器是Serial收集器的多线程版本")]),v._v(" "),_("td",[v._v("搭配CMS垃圾回收器的首选")])]),v._v(" "),_("tr",[_("td",[v._v("Parallel Scavenge吞吐量优先收集器")]),v._v(" "),_("td",[v._v("新生代，复制算法")]),v._v(" "),_("td",[v._v("并行的多线程收集器")]),v._v(" "),_("td",[v._v("类似ParNew，更加关注吞吐量，达到一个可控制的吞吐量")]),v._v(" "),_("td",[v._v("本身是Server级别多CPU机器上的默认GC方式，主要适合后台运算不需要太多交互的任务")])])])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("收集器")]),v._v(" "),_("th",[v._v("收集对象和算法")]),v._v(" "),_("th",[v._v("收集器类型")]),v._v(" "),_("th",[v._v("说明")]),v._v(" "),_("th",[v._v("适用场景")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Serial Old")]),v._v(" "),_("td",[v._v("老年代，标记整理算法")]),v._v(" "),_("td",[v._v("单线程")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("Client模式下虚拟机使用")])]),v._v(" "),_("tr",[_("td",[v._v("Parallel Old")]),v._v(" "),_("td",[v._v("老年代，标记整理算法")]),v._v(" "),_("td",[v._v("并行的多线程收集器")]),v._v(" "),_("td",[v._v("Paraller Scavenge收集器的老年代版本，为了配置Parallel Svavenge的面向吞吐量的特性而开发的对应组合")]),v._v(" "),_("td",[v._v("在注重吞吐量以及CPU资源敏感的场合采用")])]),v._v(" "),_("tr",[_("td",[v._v("CMS")]),v._v(" "),_("td",[v._v("老年代，标记清除算法")]),v._v(" "),_("td",[v._v("并行与并发收集器")]),v._v(" "),_("td",[v._v("尽可能的缩短垃圾收集时用户线程停止时间；缺点在于，1.内存碎片，2.需要更多CPU资源，3.浮动垃圾问题，需要更大的堆空间")]),v._v(" "),_("td",[v._v("重视服务的相应速度，系统停顿时间和用户体验的互联网网站或者B/S系统。互联网后端目前cms是主流的垃圾回收器")])]),v._v(" "),_("tr",[_("td",[v._v("G1")]),v._v(" "),_("td",[v._v("跨新生代和老年代；标记整理")]),v._v(" "),_("td",[v._v("并行与并发收集器")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("JDK1.7才正式引入，采用分区回收的思维，基本不牺牲吞吐量的前提下完成低停顿的内存回收；可预测的停顿是其最大的优势")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);