(window.webpackJsonp=window.webpackJsonp||[]).push([[284],{683:function(t,e,n){"use strict";n.r(e);var r=n(56),o=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"spring-aop源码解析-执行切面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop源码解析-执行切面"}},[t._v("#")]),t._v(" Spring AOP源码解析：执行切面")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/cfe8e1b76de74cf38175b04f8644dd99.png?",alt:"请添加图片描述"}})]),t._v(" "),n("h2",{attrs:{id:"切面执行顺序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切面执行顺序"}},[t._v("#")]),t._v(" 切面执行顺序")]),t._v(" "),n("p",[t._v("说起这个切面执行顺序，我就想起一个之前遇到的挺有意思的问题，为啥@Around方法里面不手动调用joinPoint.proceed()方法，目标方法就不会执行，并且@Before方法的逻辑也不会执行？")]),t._v(" "),n("p",[n("strong",[t._v("我们先来看一下切面的执行顺序")])]),t._v(" "),n("p",[t._v("一个方法被一个aspect类拦截时的执行顺序如下")]),t._v(" "),n("p",[t._v("@Around->@Before->方法执行->@Around->@After->@AfterReturning/@AfterThrowing")]),t._v(" "),n("p",[t._v("当方法正常结束时，执行@AfterReturning。方法异常结束时，执行@AfterThrowing")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/99b3177525f84fb0804541b39e1e8d05.png",alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[n("strong",[t._v("当多个切面同时执行时，我们可以实现Ordered接口，或者使用@Order注解指定顺序。order值越小，执行顺序越来越靠前")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/31cd0eac64cf4322a00652866c79afbf.png?",alt:"在这里插入图片描述"}}),t._v("\n图中After，AfterReturning，AfterThrowing还是依次执行哈，放到一块是图片好看一点")]),t._v(" "),n("h2",{attrs:{id:"jdk动态代理切面执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理切面执行"}},[t._v("#")]),t._v(" JDK动态代理切面执行")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/2b6fc0f9d2d64d2291e40df1d1bb3294.png?",alt:"在这里插入图片描述"}}),t._v("\n我们只分析JdkDynamicAopProxy的执行过程，jdk动态代理的类所有方法的执行都会经过InvocationHandler#invoke方法，所以我们直接来分析invoker方法")]),t._v(" "),n("p",[t._v("JdkDynamicAopProxy#invoke（省略部分无关紧要的逻辑）\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/d3d0211a2d0845e0b91b0420fa9b2593.png?",alt:"在这里插入图片描述"}}),t._v(" "),n("strong",[t._v("之前在生成代理对象的时候，我们把能够应用于当前Bean的Advisor存到advised，当方法执行的时候执行getInterceptorsAndDynamicInterceptionAdvice方法筛选出能够适用于当前方法的Advisor，并缓存下来")])]),t._v(" "),n("p",[t._v("AdvisedSupport#getInterceptorsAndDynamicInterceptionAdvice\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/a25f427e2bc94cafa7fbcf8de2b29728.png",alt:"在这里插入图片描述"}}),t._v("\n如果方法没有对应的Advisor，则反射执行方法即可\n如果方法有对应的Advisor，则执行ReflectiveMethodInvocation#proceed")]),t._v(" "),n("p",[t._v("ReflectiveMethodInvocation#proceed\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/0fed8ae76f8a4ee39365811ab0be3e67.png?",alt:"在这里插入图片描述"}}),t._v("\n感觉切面链念起来怪怪的，我们这里就叫做拦截器链把，这段的作用主要就是依次执行拦截器链然后执行目标方法。如果拦截器是InterceptorAndDynamicMethodMatcher的实现类，则动态匹配一下，看是否需要执行。")]),t._v(" "),n("p",[t._v("我们常用的AspectJ注解都是直接强转为MethodInterceptor，然后执行invoke方法。")]),t._v(" "),n("p",[n("strong",[t._v("我原来看到这段代码的时候还挺奇怪的，拦截器链执行完才执行被代理的方法，那@Around，@After之类的拦截器是怎么执行的？不应该放在目标方法执行完毕才执行吗？")])]),t._v(" "),n("p",[t._v("于是写了如下一个Demo，把所有的拦截器都用上\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/58385f6da69145358ff6ca9e784fd8e0.png?",alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("执行的时候拦截器的顺序如下，")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/523013752a8946b189cf3db47698b91b.png",alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("ExposeInvocationInterceptor是框架设置进去的，不管他了。我把调用的链路画了一下，这样所以的疑惑都解决了，源码我就不看了哈，简单的递归调用\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/92fa9f504ef7427dbc9d97d3c5d95679.png?",alt:"在这里插入图片描述"}})]),t._v(" "),n("p",[t._v("图示中的proceed代表执行ReflectiveMethodInvocation#proceed方法哈")]),t._v(" "),n("p",[t._v("看到图示你应该明白了@Around里面不调用joinPoint.proceed()方法时，目标方法和@Before逻辑都不会执行的原因了把！")])])}),[],!1,null,null,null);e.default=o.exports}}]);