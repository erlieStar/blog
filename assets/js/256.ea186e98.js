(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{654:function(t,a,s){"use strict";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"seata源码解析-seata和spring是如何整合的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#seata源码解析-seata和spring是如何整合的"}},[t._v("#")]),t._v(" seata源码解析：seata和spring是如何整合的？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/5d57fb5b394a4cc39f77eacc5fb9d873.jpg?",alt:"请添加图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("在seata低版本中，seata需要用户自己配置数据源代理，并且在resources目录下放2个文件，file.conf和registry.conf。")]),t._v(" "),s("p",[t._v("其中file.conf配置了数据存储模式，registry.conf配置了注册中心的信息")]),t._v(" "),s("p",[t._v("在最新的版本中，seata新增了一个seata-spring-boot-starter模块，让我们可以将数据存储模式和注册中心定义在application.yaml中，并且可以通过Enable注解开始数据源自动代理。")]),t._v(" "),s("p",[t._v("因为我之前的Demo都是基于seata-spring-boot-starter搭建的，所以本节我们就来看一下seata-spring-boot-starter注入了哪些重要的Bean。")]),t._v(" "),s("p",[t._v("按照spring-boot-starter模块的常规套路，直接找spring.factories文件")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2c7b41d7176148919cbaaa7175b1c8d8.png",alt:"在这里插入图片描述"}})]),t._v(" "),s("div",{staticClass:"language-factories extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\nio.seata.spring.boot.autoconfigure.SeataPropertiesAutoConfiguration,\\\nio.seata.spring.boot.autoconfigure.SeataDataSourceAutoConfiguration,\\\nio.seata.spring.boot.autoconfigure.SeataAutoConfiguration,\\\nio.seata.spring.boot.autoconfigure.HttpAutoConfiguration\n")])])]),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/49513d1565064934a577bdea00061118.jpg?",alt:"请添加图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"seatapropertiesautoconfiguration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#seatapropertiesautoconfiguration"}},[t._v("#")]),t._v(" SeataPropertiesAutoConfiguration")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplicationContextProvider")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContextAware")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanFactoryPostProcessor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setApplicationContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContext")]),t._v(" applicationContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectHolder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INSTANCE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OBJECT_KEY_SPRING_APPLICATION_CONTEXT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" applicationContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" beanFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("而SpringApplicationContextProvider继承了ApplicationContextAware用来获取ApplicationContext，后续就可以从ApplicationContext中获取对象")]),t._v(" "),s("p",[t._v("BeanFactoryPostProcessor接口是用来修改bean的创建方式的，目前方法没有任务实现")]),t._v(" "),s("h2",{attrs:{id:"seatadatasourceautoconfiguration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#seatadatasourceautoconfiguration"}},[t._v("#")]),t._v(" SeataDataSourceAutoConfiguration")]),t._v(" "),s("p",[t._v("seata的at和xa模式是基于数据源代理实现的，而SeataDataSourceAutoConfiguration帮助我们对数据源实现了自动代理，不用手动代理。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/8059e72ea6cf4e799a83a1f66a708318.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("各个部分的代理对象的作用以及生效场景如下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/3054af8eac2e450a8d3ff8a45a31295e.png?",alt:"请添加图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"seataautoconfiguration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#seataautoconfiguration"}},[t._v("#")]),t._v(" SeataAutoConfiguration")]),t._v(" "),s("p",[t._v("GlobalTransactionScanner是一个非常重要的类，这个类中会启动RM和TM客户端，并且对加了@GlobalTransactional，@GlobalLock，@TwoPhaseBusinessAction注解的类生成代理对象")]),t._v(" "),s("p",[t._v("FailureHandler是一个失败任务处理类，目前唯一的实现是DefaultFailureHandlerImpl，并没有做任何额外的操作，只是在任务失败时，打印相关的日志。当然你可以重写一下FailureHandler，比如当失败发生时发送邮件或者钉钉")]),t._v(" "),s("h2",{attrs:{id:"httpautoconfiguration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#httpautoconfiguration"}},[t._v("#")]),t._v(" HttpAutoConfiguration")]),t._v(" "),s("p",[t._v("HttpAutoConfiguration这个类主要是用在应用通过http调用时，传递xid。")]),t._v(" "),s("p",[t._v("拦截器TransactionPropagationInterceptor：从请求中名为TX_XID的head中取出xid的值（因为上游在调用的时候会把xid放在head中），并把这个xid放到RootContext中\n异常处理器HttpHandlerExceptionResolver：当调用http请求发生异常时，将xid从RootContext中删除")])])}),[],!1,null,null,null);a.default=e.exports}}]);