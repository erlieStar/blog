(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{636:function(t,s,e){"use strict";e.r(s);var r=e(56),v=Object(r.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"rocketmq源码解析-消息发送和消费核心流程汇总"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq源码解析-消息发送和消费核心流程汇总"}},[t._v("#")]),t._v(" RocketMQ源码解析：消息发送和消费核心流程汇总")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/4ded5215615d4e22b51411924bcd4481.png",alt:"请添加图片描述"}})]),t._v(" "),e("h2",{attrs:{id:"从上帝视角看一下消息发送和消费"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从上帝视角看一下消息发送和消费"}},[t._v("#")]),t._v(" 从上帝视角看一下消息发送和消费")]),t._v(" "),e("p",[t._v("当我们使用RocketMQ时，RocketMQ-Dashboard是一个非常好用的图形化界面工具")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/6ef2962193f342e89c6c06d86033d7e9.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("我们首先在RocketMQ-Dashboard上创建一个topic，每个topic下4个队列")]),t._v(" "),e("p",[t._v("每个topic是一类消息的集合，topic下面再细分queue是为了提高消息消费的并发度")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/bbc4a35132864db5abe90180066f49db.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[e("strong",[t._v("当producer发送topic消息时，应该往topic下的哪个queue来发送呢？")])]),t._v(" "),e("p",[t._v("producer会采用轮询的策略发送")]),t._v(" "),e("p",[e("strong",[t._v("那么consumer应该消费哪个queue下的消息呢？")])]),t._v(" "),e("p",[t._v("当有一个消费者时当然是消费所有的queue")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/0cab6cdc270c4cc9a3ddbc2d039b2656.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[e("strong",[t._v("如果有多个消费者呢？")])]),t._v(" "),e("p",[t._v("只需要根据各种负载均衡策略将队列分配给消费者即可，如下图是两种负载均衡的方式")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/ce05a1a630e74a08b4cac28409cc1239.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/905ca097a6c541cd9f0f9fcb0bb378cc.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("你问我这两种负载策略怎么实现的？去看看源码呗，详细过程我就不分析了")]),t._v(" "),e("p",[e("strong",[t._v("如果消费者数量超过队列的数量会发生什么？")])]),t._v(" "),e("p",[t._v("多出来的消费者将不会消费任何队列")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/8cba0de12ef942deba8e44fc845fb34e.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[e("strong",[t._v("为什么一个consumer只能消费一个queue呢？")])]),t._v(" "),e("p",[t._v("多个消费者消费一个queue肯定会有并发问题，所以得加锁，这样还不如把topic下的队列数量设置的多一点")]),t._v(" "),e("p",[e("strong",[t._v("我在运行的过程中可以设置topic下queue的数量吗？")])]),t._v(" "),e("p",[t._v("当然可以。不仅可以重新设置queue的数量，还可以实时增减consumer，以应对不同流量的场景")]),t._v(" "),e("p",[e("strong",[t._v("那这样说当queue或者consumer的数量发生变化的时候，需要重新执行负载均衡吧？")])]),t._v(" "),e("p",[t._v("是的，大家一般把这个过程叫做重平衡")]),t._v(" "),e("p",[t._v("下面我们来分享一下详细的细节")]),t._v(" "),e("h2",{attrs:{id:"消息发送流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息发送流程"}},[t._v("#")]),t._v(" 消息发送流程")]),t._v(" "),e("p",[t._v("消息发送主要有3种方式单向发送（只发送，不管结果），同步发送和异步发送")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/4b253326caf8464b91c659b8c3afd82d.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("h2",{attrs:{id:"消息消费流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息消费流程"}},[t._v("#")]),t._v(" 消息消费流程")]),t._v(" "),e("h3",{attrs:{id:"消息是基于推还是拉"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息是基于推还是拉"}},[t._v("#")]),t._v(" 消息是基于推还是拉？")]),t._v(" "),e("p",[t._v("消息消费的模式有两种方式：")]),t._v(" "),e("ol",[e("li",[t._v("拉取：Consumer不断从Broker拉取")]),t._v(" "),e("li",[t._v("推送：Broker向Consumer推送")])]),t._v(" "),e("p",[t._v("这两种方式都有各自的缺点：")]),t._v(" "),e("ol",[e("li",[t._v("拉取：拉取的间隔不好确定，间隔太短没消息时会造成带宽浪费，间隔太长又会造成消息不能及时被消费")]),t._v(" "),e("li",[t._v("推送："),e("strong",[t._v("推送和速率难以适配消费速率")]),t._v("，推的太快，消费者消费不过来怎么办？推的太慢消息不能及时被消费")])]),t._v(" "),e("p",[e("strong",[t._v("看起来拉取和推送难以抉择")])]),t._v(" "),e("p",[t._v("然后就有大佬把拉取模式改了一下，即不会造成带宽浪费，也能基于消费的速率来决定拉取的频率！")]),t._v(" "),e("p",[e("strong",[t._v("你猜怎么改的？")])]),t._v(" "),e("p",[t._v("其实很简单，Consumer发送拉取请求到Broker端，如果Broker有数据则返回，Consumer端再次拉取。如果Broker端没有数据，不立即返回，而是等待一段时间（例如5s）。")]),t._v(" "),e("ol",[e("li",[t._v("如果在等待的这段时间，有要拉取的消息，则将消息返回，Consumer端再次拉取。")]),t._v(" "),e("li",[t._v("如果等待超时，也会直接返回，不会将这个请求一直hold住，Consumer端再次拉取")])]),t._v(" "),e("p",[e("strong",[t._v("对了，这种策略就叫做长轮询")])]),t._v(" "),e("p",[e("strong",[t._v("RocketMQ中有拉和推两种消费方式，但是推是基于长轮询做的")])]),t._v(" "),e("h3",{attrs:{id:"具体消费流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#具体消费流程"}},[t._v("#")]),t._v(" 具体消费流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/9ec8a8bc3abc4fb0956e90de4b4db2be.png#pic_center",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[e("strong",[t._v("拉取到消息后是怎么处理的呢？")])]),t._v(" "),e("p",[t._v("PullRequest类的成员变量如下图")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/4bcfe02658884a688fff667cfcc9cc04.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("当拉取到消息后，消息会被放入msgTreeMap，其中key为消息的offset，value为消息实体")]),t._v(" "),e("p",[e("strong",[t._v("另外还有一个重要的属性dropped，和重平衡相关，重平衡的时候会造成消息的重复消费，具体机制不分析了，看专栏把")])]),t._v(" "),e("p",[t._v("msgCount（未消费消息总数）和msgSize（未消费消息大小）是和流控相关的")]),t._v(" "),e("p",[e("strong",[t._v("什么是流控呢？")])]),t._v(" "),e("p",[t._v("就是流量控制，当消费者消费的比较慢时，减缓拉取的速度。如下图")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/6675cba516e7456ab9607b33e4b83346.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("当从阻塞队列中获取PullRequest时，并不会直接发起网络请求，而是先看看是否触发流控的规则，比如未消费的消息总数超过一定值，未消费的消息大小超过一定值等")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/6f267fc168e14f44ae5e9b450df537f5.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("接着就是收到响应，处理消息，并键PullRequest再次放入阻塞队列.")]),t._v(" "),e("p",[e("strong",[t._v("是不是落了一个步骤？就是Consumer告诉Broker这部分消息我消费了？")])]),t._v(" "),e("p",[t._v("嗯嗯，你是不是以为提交offset的过程是同步的？其实并不是，"),e("strong",[t._v("是异步的")])]),t._v(" "),e("h3",{attrs:{id:"consumer怎么提交offset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#consumer怎么提交offset"}},[t._v("#")]),t._v(" Consumer怎么提交offset？")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/b87632ce2e3c404b8ef21b568b73e202.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("当consumer消费完消息只是将offset存在本地，通过定时任务将offset提交到broker，另外broker收到提交offset的请求后，也仅仅是将offset存在map中，通过定时任务持久化到文件中")]),t._v(" "),e("p",[e("strong",[t._v("这样就会造成消息的重复消费")])]),t._v(" "),e("ol",[e("li",[t._v("Consumer消费完消息并不是实时同步到Broker的，而是将offset先保存在本地map中，通过定时任务持久化上去。这就导致消息被消费了，但是此时消费者宕机了导致offset没提交，下次没提交offset的这部分消息会被再次消费")]),t._v(" "),e("li",[t._v("即使offset被提交到了Broker，在还没来得及持久化的时候Broker宕机了，当重启的时候Broker会读取consumerOffset.json中保存的offset信息，这就会导致没持久化offset的这部分消息会被再次消费")])])])}),[],!1,null,null,null);s.default=v.exports}}]);