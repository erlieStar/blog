(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{670:function(a,t,e){"use strict";e.r(t);var n=e(56),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"spring-ioc源码解析-spring-bean生命周期详解-一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc源码解析-spring-bean生命周期详解-一"}},[a._v("#")]),a._v(" Spring IOC源码解析：Spring Bean生命周期详解（一）")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/f394262deadd1044b261738f77fbcb31.jpeg",alt:"请添加图片描述"}})]),a._v(" "),e("h2",{attrs:{id:"defaultlistablebeanfactory继承体系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defaultlistablebeanfactory继承体系"}},[a._v("#")]),a._v(" DefaultListableBeanFactory继承体系")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/020445dfb5f9ff42dc80c99e5358e9ef.png",alt:"在这里插入图片描述"}})]),a._v(" "),e("p",[a._v("BeanFactory：Bean工厂，用来生产Bean")]),a._v(" "),e("p",[a._v("ConfigurableBeanFactory：提供配置工厂的方法")]),a._v(" "),e("p",[a._v("AutowireCapableBeanFactory：创建Bean，自动注入，初始化以及应用BeanPostProcessor")]),a._v(" "),e("p",[a._v("HierarchicalBeanFactory：获取父工厂")]),a._v(" "),e("p",[a._v("ListableBeanFactory：迭代的方式获取Bean")]),a._v(" "),e("p",[a._v("ConfigurableListableBeanFactory：指定忽略类型及清单")]),a._v(" "),e("p",[a._v("FactoryBeanRegistrySupport：增加对FactoryBean的支持")]),a._v(" "),e("p",[a._v("DefaultListableBeanFactory：最常用的BeanFactory实现类")]),a._v(" "),e("hr"),a._v(" "),e("p",[a._v("AliasRegistry：定义对别名的增删查操作")]),a._v(" "),e("p",[a._v("SimpleAliasRegistry：对AliasRegistry进行实现。使用map保存 bean的别名->bean的名字 的映射关系")]),a._v(" "),e("p",[a._v("BeanDefinitionRegistry：定义对BeanDefinition的增删查操作")]),a._v(" "),e("p",[a._v("SingletonBeanRegistry：实现对单例Bean的注册和获取")]),a._v(" "),e("p",[a._v("DefaultSingletonBeanRegistry：对SingletonBeanRegistry进行实现。用map保存生成的单例Bean")]),a._v(" "),e("p",[a._v("因为初始化非延迟单例Bean的调用链路比较深，我先画一个简图，后续源码解析都围绕这个简图来展开。你可以先看一下这个简图，后续看源码就非常容易理解了！\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/4e5a6f3f206d270bc572caccf8d4a3df.png",alt:"在这里插入图片描述"}}),a._v("\nSpring Bean生命周期的过程比较复杂，因此我用两节来分享。"),e("strong",[a._v("第一节了解Bean生命周期的主要执行链路，涉及到BeanPostProcessor执行的部分全部跳过。第二季主要分析BeanPostProcessor的执行部分。")])]),a._v(" "),e("p",[a._v("这样先了解执行链路，再了解执行细节的方式，大家更容易接受，也不会晕车。毫不夸张的说，搞懂了Spring生命周期，就把Spring搞懂了一半")]),a._v(" "),e("h2",{attrs:{id:"实例化bean的几种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例化bean的几种方式"}},[a._v("#")]),a._v(" 实例化Bean的几种方式")]),a._v(" "),e("p",[a._v("我们常用的实例化Bean的方式有如下几种")]),a._v(" "),e("ol",[e("li",[a._v("构造方法实例化 Bean")]),a._v(" "),e("li",[a._v("静态方法实例化 Bean")]),a._v(" "),e("li",[a._v("Bean工厂方法实例化 Bean")]),a._v(" "),e("li",[a._v("FactoryBean实例化 Bean")])]),a._v(" "),e("p",[a._v("写个demo演示一下这几种方式\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/e8ee002bc17c52ee85a0f89759e27945.png",alt:"在这里插入图片描述"}}),a._v(" "),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/c66578ef438d0d025148200a77dbb554.png",alt:"在这里插入图片描述"}}),a._v(" "),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/963546b4785e5bf4b41bf7912410f552.png",alt:"在这里插入图片描述"}})]),a._v(" "),e("p",[e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/cbf67744e13e8d983e617ee1dea8e209.png",alt:"在这里插入图片描述"}}),a._v(" "),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/98eb2b45209de5f48a72b5702ab26dc2.png",alt:"在这里插入图片描述"}}),a._v("\n可以看到当我们用FactoryBean实现类的名字来获取Bean时，获取到的并不是FactoryBean，而是调用FactoryBean#getObject方法创建出来的对象。")]),a._v(" "),e("p",[a._v("我们我们如何获取FactoryBean对象呢？只需要在名字前面加一个&即可")]),a._v(" "),e("h2",{attrs:{id:"初始化非延迟单例bean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化非延迟单例bean"}},[a._v("#")]),a._v(" 初始化非延迟单例Bean")]),a._v(" "),e("p",[a._v("DefaultListableBeanFactory#preInstantiateSingletons\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/e5dc30ded35d210df66044d020c7e2ba.png",alt:"在这里插入图片描述"}}),a._v("\n这个方法后面还有回调SmartInitializingSingleton#afterSingletonsInstantiated方法，这其实是Bean生命周期中的初始化完成阶段，我们下节详细分析")]),a._v(" "),e("p",[a._v("AbstractBeanFactory#doGetBean\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/6fd025dbed40230d82448226b5f76ac1.png",alt:"在这里插入图片描述"}}),a._v("\n首先先从1，2，3级缓存中取，取不到再进行下面的创建过程\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/5d2b288663942bb51e0b802ea970bb09.png",alt:"在这里插入图片描述"}}),a._v("\nAbstractAutowireCapableBeanFactory#createBean（删除部分代码）\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/0e1a3bbeb80cbb5304c1b6b01f27c0af.png",alt:"在这里插入图片描述"}}),a._v("\n先执行实例化前阶段的逻辑，然后再调用doCreateBean进行创建")]),a._v(" "),e("p",[a._v("AbstractAutowireCapableBeanFactory#doCreateBean\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/1a9cc91855004a87a96151dbb5aadca9.png",alt:"在这里插入图片描述"}}),a._v("\n比较重要的过程我都框起来了！")]),a._v(" "),e("h2",{attrs:{id:"实例化bean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例化bean"}},[a._v("#")]),a._v(" 实例化Bean")]),a._v(" "),e("p",[a._v("AbstractAutowireCapableBeanFactory#createBeanInstance（省略了部分不常用的逻辑）\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/ce58503f2707f9af0d6a716a5793d3e3.png",alt:"在这里插入图片描述"}}),a._v("\n实例化策略如下")]),a._v(" "),e("ol",[e("li",[a._v("工厂方法不为空则使用工厂方法实例化Bean")]),a._v(" "),e("li",[a._v("因为Bean的构造函数有可能有很多个，所以要推断使用哪个构造函数来实例化Bean")]),a._v(" "),e("li",[a._v("如果推断出来的构造函数不为空，则使用推断出来的构造函数实例化Bean，否则使用默认构造函数实例化Bean")])]),a._v(" "),e("p",[a._v("使用默认推断出来的构造函数还是使用默认构造函数实例化Bean会缓存下来，下次再实例化的时候就可以直接用，不用再次推断了")]),a._v(" "),e("h2",{attrs:{id:"属性赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性赋值"}},[a._v("#")]),a._v(" 属性赋值")]),a._v(" "),e("p",[a._v("AbstractAutowireCapableBeanFactory#populateBean\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/7307c6317547488e2b5cf26818cd1bc2.png",alt:"在这里插入图片描述"}}),a._v("\n属性赋值主要分为属性赋值前阶段和属性赋值阶段")]),a._v(" "),e("h2",{attrs:{id:"初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[a._v("#")]),a._v(" 初始化")]),a._v(" "),e("p",[a._v("AbstractAutowireCapableBeanFactory#initializeBean\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/5bc6bb374a7ef790912921601cf56674.png",alt:"在这里插入图片描述"}}),a._v("\nAbstractAutowireCapableBeanFactory#invokeAwareMethods\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/59fe618a75eb50d36848784ed5e4c4fd.png",alt:"在这里插入图片描述"}}),a._v(" "),e("strong",[a._v("回调BeanNameAware，BeanClassLoaderAware，BeanFactoryAware接口的注入方法")]),a._v(" "),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/a9bd06a0e2523661727799d7fd310a10.png",alt:"在这里插入图片描述"}}),a._v(" "),e("strong",[a._v('执行InitializingBean#afterPropertiesSet方法\n执行用户自定义的初始化方法，例如@Bean(initMethod = "customerInit")')])]),a._v(" "),e("h2",{attrs:{id:"注册disposablebean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册disposablebean"}},[a._v("#")]),a._v(" 注册DisposableBean")]),a._v(" "),e("p",[a._v("当我们想在Bean销毁前做一些操作时，可以通过如下3种方式实现")]),a._v(" "),e("ol",[e("li",[a._v("使用@PreDestroy注解")]),a._v(" "),e("li",[a._v("实现DisposableBean接口，重写destroy方法")]),a._v(" "),e("li",[a._v('自定义销毁方法，例如 @Bean(destroyMethod = "customerDestroy")')])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/da5b4d4848d60b17d160d793209eb963.png",alt:"在这里插入图片描述"}}),a._v(" "),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/b7530e12c687af13e7fac67848f20c40.png",alt:"在这里插入图片描述"}}),a._v("\nAbstractBeanFactory#registerDisposableBeanIfNecessary\n"),e("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/7a892b2ea45e659fe708ccdefed397f8.png",alt:"在这里插入图片描述"}}),a._v("\nregisterDisposableBeanIfNecessary的作用就是把实现了Bean销毁方法的Bean（以上三种方式只要实现了一种就行）注册到DefaultSingletonBeanRegistry的disposableBeans中")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// DefaultSingletonBeanRegistry")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** Disposable bean instances: bean name to disposable instance. */")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" disposableBeans "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LinkedHashMap")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("当容器关闭的时候，就会从disposableBeans拿到需要执行销毁方法的Bean，然后执行对应的销毁方法，"),e("strong",[a._v("执行的优先级为@PreDestroy > DisposableBean > 自定义销毁方法")])])])}),[],!1,null,null,null);t.default=s.exports}}]);