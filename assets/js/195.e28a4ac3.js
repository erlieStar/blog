(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{593:function(t,a,s){"use strict";s.r(a);var e=s(56),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mybatis源码解析-配置解析流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis源码解析-配置解析流程"}},[t._v("#")]),t._v(" Mybatis源码解析：配置解析流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/10fbf791e1054ab1918c25345d228f6a.jpg?",alt:"在这里插入图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"解析配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析配置"}},[t._v("#")]),t._v(" 解析配置")]),t._v(" "),s("p",[t._v("在我看mybatis源码的时候，大部分代码还是很简单的，DefaultResultSetHandler这个类是最难的，没有之一，debug了很多遍，还是没太搞懂，基于ResultSetHandler也并不是很重要，所以本系列我就不会写ResultSetHandler的内容了")]),t._v(" "),s("p",[t._v("mybatis解析配置阶段的代码还是比较简单的，基本上就是对配置文件中的各种属性进行解析，然后将值保存到Configuration对象中，因此直接画个流程图就略过了。比较重要的过程，比如sql的解析过程我会单开一节来分析")]),t._v(" "),s("p",[t._v("解析的过程用了建造者模式，将对象与对象的创建过程进行了解耦。建造者模式UML图如下\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200226140235678.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("主要有如下4个角色：")]),t._v(" "),s("ol",[s("li",[t._v("建造者（Builder）接口：定义对象各部分的行为")]),t._v(" "),s("li",[t._v("具体建造者（ConcreteBuilder）：一般来说有2种类型的方法，1.建造方法，如buildPart1()，2.获取构建好的产品对象的方法，如getProduct()方法")]),t._v(" "),s("li",[t._v("导演（Director）：通过调用具体建造者，创建需要的产品")]),t._v(" "),s("li",[t._v("产品（Product）：用户需要使用的复杂对象")])]),t._v(" "),s("p",[t._v("mybatis中配置文件分为两部分，mybatis配置文件和mapper映射文件，用了不同的类来进行解析")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类")]),t._v(" "),s("th",[t._v("文件")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("XMLConfigBuilder")]),t._v(" "),s("td",[t._v("主要负责解析mybatis-config.xml")])]),t._v(" "),s("tr",[s("td",[t._v("XMLMapperBuilder")]),t._v(" "),s("td",[t._v("主要负责解析mapper.xml中的cache-ref，cache，parameterMap，resultMap，sql节点")])]),t._v(" "),s("tr",[s("td",[t._v("XMLStatementBuilder")]),t._v(" "),s("td",[t._v("主要负责解析mapper.xml中的select，insert，update，delete这四类节点")])])])]),t._v(" "),s("p",[t._v("当执行完如下2行代码，整个解析过程就完毕了，最后返回的SqlSessionFactory为DefaultSqlSessionFactory")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Reader")]),t._v(" reader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Resources")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResourceAsReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"org/apache/ibatis/mytest/mybatis-config.xml"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqlSessionFactory")]),t._v(" sqlSessionFactory "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqlSessionFactoryBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/f7bcb6b12a674202bdcf9025b23442e7.png?",alt:"在这里插入图片描述"}}),t._v("\n我把解析每个sql语句中比较重要的代码截出来了")]),t._v(" "),s("p",[t._v("org.apache.ibatis.builder.xml.XMLStatementBuilder#parseStatementNode")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/8051f3ef9e0d4446aa01eafaf1847116.png?",alt:"在这里插入图片描述"}}),t._v("\n最后把解析完成的sql封装成MappedStatement，并存到Configuration中，后续根据id就可以直接取到MappedStatement，然后执行sql\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/c58f9840677e4d4d9335d8346ff6091f.png",alt:"在这里插入图片描述"}}),t._v("\nMappedStatement中有一个很重要的属性SqlSource，这是解析完sql后封装的一个对象，下节我们详细分析一下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/5d812110b2bb45b393dae6a5d479de03.png?",alt:"在这里插入图片描述"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);