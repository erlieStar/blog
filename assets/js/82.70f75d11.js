(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{476:function(e,t,r){"use strict";r.r(t);var a=r(56),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"面试官-resource和-autowired有啥区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面试官-resource和-autowired有啥区别"}},[e._v("#")]),e._v(" 面试官：@Resource和@Autowired有啥区别？")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210329213951423.jpg?",alt:"在这里插入图片描述"}})]),e._v(" "),r("h2",{attrs:{id:"自动绑定-autowiring-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自动绑定-autowiring-模式"}},[e._v("#")]),e._v(" 自动绑定（Autowiring）模式")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("模式")]),e._v(" "),r("th",[e._v("说明")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("no")]),e._v(" "),r("td",[e._v("默认值，未激活 Autowiring，需要手动执行依赖注入对象")])]),e._v(" "),r("tr",[r("td",[e._v("byName")]),e._v(" "),r("td",[e._v("根据被注入属性的名称作为Bean名称进行依赖查找，并将对象设置到该属性")])]),e._v(" "),r("tr",[r("td",[e._v("byType")]),e._v(" "),r("td",[e._v("根据被注入属性的类型作为依赖类型进行查找，并将对象设置到该属性")])]),e._v(" "),r("tr",[r("td",[e._v("constructor")]),e._v(" "),r("td",[e._v("特殊的byType类型，用户构造器参数")])])])]),e._v(" "),r("p",[e._v("@Autowired是Spring中的注解，@Resource是JSR-250中提供的注解，即Java提供的注解，从包名就可以看出来")]),e._v(" "),r("p",[e._v("Autowired：org.springframework.beans.factory.annotation.Autowired")]),e._v(" "),r("p",[e._v("Resource：javax.annotation.Resource")]),e._v(" "),r("h2",{attrs:{id:"autowired"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#autowired"}},[e._v("#")]),e._v(" @Autowired")]),e._v(" "),r("p",[e._v("@Autowired的依赖注入过程是由AutowiredAnnotationBeanPostProcessor支持的")]),e._v(" "),r("p",[e._v("具体的注入逻辑在DefaultListableBeanFactory#doResolveDependency")]),e._v(" "),r("p",[e._v("@Autowired的注入逻辑如下")]),e._v(" "),r("ol",[r("li",[e._v("找到所有类型符合的bean")]),e._v(" "),r("li",[e._v("如果没有类型符合的bean，则看@Autowired的required属性是否为true，是则抛出异常，否则返回null")]),e._v(" "),r("li",[e._v("如果只有一个，则将这个bean注入")]),e._v(" "),r("li",[e._v("如果有多个bean\n4.1 选择其中带有Primary注解的bean，如果只有一个直接注入，如果有多个bean带有Primary注解则报错，如果不存在就下一步\n4.2 选择其中优先级最高的bean(优先级使用javax.annotation.Priority表明)，如果只有一个直接注入，如果有多个bean的优先级并列最高则报错，如果不存在就下一步\n4.3 选择beanName和当前要注入的属性名相同的bean进行注入，有则注入，没有则报错")])]),e._v(" "),r("h2",{attrs:{id:"resource"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resource"}},[e._v("#")]),e._v(" @Resource")]),e._v(" "),r("p",[e._v("@Resource的依赖注入过程是由CommonAnnotationBeanPostProcessor支持的")]),e._v(" "),r("p",[e._v("具体的注入逻辑在CommonAnnotationBeanPostProcessor#autowireResource")]),e._v(" "),r("p",[e._v("@Resource的注入逻辑如下")]),e._v(" "),r("ol",[r("li",[e._v("如果@Resource指定了name，则只会按照name进行查找，当找不到时抛出异常，找到将bean注入")]),e._v(" "),r("li",[e._v("如果@Resource没有指定name，则把属性名作为名字进行查找，找到将bean注入，当按照名字查找不到时，按照类型进行查找")])]),e._v(" "),r("p",[r("strong",[e._v("注意：@Resource按照类型查找的逻辑和@Autowired的一样，因为都是调用了DefaultListableBeanFactory#doResolveDependency方法")])]),e._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("@Autowired：先byType再byName")]),e._v(" "),r("p",[e._v("@Resource：先byName再byType（当指定@Resource name属性时，只会byName）")])])}),[],!1,null,null,null);t.default=o.exports}}]);