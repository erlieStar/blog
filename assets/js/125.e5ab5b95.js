(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{522:function(t,a,s){"use strict";s.r(a);var e=s(56),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"面试官-同样是注册中心-zookeeper和eureka有哪些区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试官-同样是注册中心-zookeeper和eureka有哪些区别"}},[t._v("#")]),t._v(" 面试官：同样是注册中心，Zookeeper和Eureka有哪些区别？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101111443137.jpg?",alt:"在这里插入图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"cap定理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cap定理"}},[t._v("#")]),t._v(" CAP定理")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101143654933.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("在分布式系统的发展中，影响最大的莫过于CAP定理了，是分布式系统发展的理论基石。")]),t._v(" "),s("ol",[s("li",[t._v("2000年，加州大学的计算机科学家 Eric Brewer提出了CAP猜想")]),t._v(" "),s("li",[t._v("2002 年，麻省理工学院的 Seth Gilbert 和 Nancy Lynch 从理论上证明了 CAP 猜想，CAP猜想成为了CAP定理")])]),t._v(" "),s("p",[s("strong",[t._v("CAP定理，简单来说就是分布式系统不可能同时满足Consistency 一致性、Availability 可用性、Partition Tolerance 分区容错性三个要素")])]),t._v(" "),s("h3",{attrs:{id:"consistency-一致性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#consistency-一致性"}},[t._v("#")]),t._v(" Consistency 一致性")]),t._v(" "),s("p",[t._v("一致性的含义为，在节点的任意时刻，访问任意节点返回的数据是一致的。即Client端写入一个数据后，Server端将数据同步到整个系统，从而保证系统的数据都相同")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101120326201.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("h3",{attrs:{id:"availability-可用性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#availability-可用性"}},[t._v("#")]),t._v(" Availability 可用性")]),t._v(" "),s("p",[t._v("可用性的含义为，集群能够对用户的请求给予响应。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021010112114646.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("h3",{attrs:{id:"partition-tolerance-分区容错性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#partition-tolerance-分区容错性"}},[t._v("#")]),t._v(" Partition Tolerance 分区容错性")]),t._v(" "),s("p",[t._v("分区容错的含义为，当出现分区故障时，系统仍要对外提供服务。分布式系统中，每个服务节点都是不可靠的，当某些节点出现异常时，或者节点之间的通讯产生异常时，整个系统就产生了分区问题，分布式系统中分区问题是客观存在的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101122220618.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"cap权衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cap权衡"}},[t._v("#")]),t._v(" CAP权衡")]),t._v(" "),s("h3",{attrs:{id:"ca"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ca"}},[t._v("#")]),t._v(" CA")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101143926522.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("系统选择CA，即不支持分区容错，只支持一致性和可用性。意味着不允许出现分区异常，网络一致处于理想状态。但是分布式系统之间网络异常是客观存在的，如果避免了P，只能把分布式系统退回到单实例系统。")]),t._v(" "),s("h3",{attrs:{id:"cp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cp"}},[t._v("#")]),t._v(" CP")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101144035978.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("因为分布式系统P是客观存在的，所以我们要在CP和AP之间进行抉择。")]),t._v(" "),s("p",[s("strong",[t._v("当选择CP时，相当于放弃系统的可用性，换取一致性")]),t._v("。zookeeper是选择了CP的系统")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101151124839.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("在zookeeper集群中，有如下三种角色")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("角色")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Leader")]),t._v(" "),s("td",[t._v("事务请求的唯一调度者和处理者 （事务请求为除查询之外的请求）")])]),t._v(" "),s("tr",[s("td",[t._v("Follower")]),t._v(" "),s("td",[t._v("处理非事务请求，参与Leader选举投票")])]),t._v(" "),s("tr",[s("td",[t._v("Observer")]),t._v(" "),s("td",[t._v("处理非事务请求，不参与选举投票")])])])]),t._v(" "),s("p",[t._v("在Leader服务器失效时，会重新从Follower服务器中选举一个新的服务器作为Leader服务器。"),s("strong",[t._v("在重新选举Leader服务器的过程中，事务请求会被挂起，选举完Leader服务器之后才会执行这些请求")]),t._v("。即为了保证一致性，放弃了系统的可用性")]),t._v(" "),s("h3",{attrs:{id:"ap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ap"}},[t._v("#")]),t._v(" AP")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101144131352.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[s("strong",[t._v("当选择AP时，相当于放弃系统一致性，换取可用性")]),t._v("。eureka是选择了AP的系统")]),t._v(" "),s("p",[t._v("和zookeeper集群中有三种角色不同的是，eureka集群中每个节点扮演相同的角色，他们通过互相注册的方式来感知对方的存在，当有注册信息时，他们会同步给集群内的其他节点。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101151402844.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("下面我从源码角度分析一下eureka是如何放弃一致性来保证可用性的（放心，不会放源码的，说一下大概思路）")]),t._v(" "),s("p",[t._v("eureka注册中心的信息保存在AbstractInstanceRegistry类的成员变量中")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AbstractInstanceRegistry")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lease")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InstanceInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" registry\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lease")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InstanceInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("就是一个双层map，这个双层map也很好理解。最外层是服务名，里面是一个具体的实例名")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210101154955519.png?",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("当有服务往eureka上注册时，注册信息会被保存在map中，同时会把信息同步给其他的节点。此时有可能有些节点不可用了，或者网络故障，并没有收到信息，此时集群节点内的信息可能是不一致的。")]),t._v(" "),s("p",[t._v("当客户端从某个eureka节点获取信息失败，或者注册失败，会自动切换到另一个eureka节点。只要有一台eureka节点可用，就能保证注册服务可用。")]),t._v(" "),s("h2",{attrs:{id:"zookeeper和eureka的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper和eureka的区别"}},[t._v("#")]),t._v(" Zookeeper和Eureka的区别")]),t._v(" "),s("p",[t._v("最后总结一下两者的区别")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("Zookeeper")]),t._v(" "),s("th",[t._v("Eureka")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("设计原则")]),t._v(" "),s("td",[t._v("CP")]),t._v(" "),s("td",[t._v("AP")])]),t._v(" "),s("tr",[s("td",[t._v("优点")]),t._v(" "),s("td",[t._v("数据最终一致")]),t._v(" "),s("td",[t._v("服务高可用")])]),t._v(" "),s("tr",[s("td",[t._v("缺点")]),t._v(" "),s("td",[t._v("网络分区会影响leader选举，超过阈值后集群不可用")]),t._v(" "),s("td",[t._v("服务节点间的数据可能不一致")])]),t._v(" "),s("tr",[s("td",[t._v("适用场景")]),t._v(" "),s("td",[t._v("对数据一致性要求较高")]),t._v(" "),s("td",[t._v("对注册中心服务可用性要求较高")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);